import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

const SmileyFisherOnline = () => {
  const [currentSection, setCurrentSection] = useState('hero');
  const [gameState, setGameState] = useState('waiting'); // waiting, fishing, caught
  const [fishingProgress, setFishingProgress] = useState(0);
  const [caughtFish, setCaughtFish] = useState<any[]>([]);
  const [coins, setCoins] = useState(150);
  const [chatMessages, setChatMessages] = useState([
    { user: 'üòä –†—ã–±–∞–∫–ü—Ä–æ', message: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö—Ç–æ –ø–æ–π–º–∞–ª —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ?', time: '14:23' },
    { user: 'üé£ –ú–∞—Å—Ç–µ—Ä–£–¥–æ—á–∫–∏', message: '–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–π–º–∞–ª –†–∞–¥—É–∂–Ω–æ–≥–æ –ü—É–∑—ã—Ä—å–∫–∞!', time: '14:25' },
    { user: 'üê† –ù–µ–ø—Ç—É–Ω—á–∏–∫Fish', message: '–£ –º–µ–Ω—è –µ—Å—Ç—å –°–º–µ—é—â–∏–π—Å—è –°—É–¥–∞–∫ –Ω–∞ –æ–±–º–µ–Ω', time: '14:27' },
  ]);
  const [newMessage, setNewMessage] = useState('');

  const funnyFishNames = [
    '–°–º–µ—é—â–∏–π—Å—è –°—É–¥–∞–∫', '–í–µ—Å–µ–ª—ã–π –û–∫—É–Ω—å', '–¢–∞–Ω—Ü—É—é—â–∏–π –¢—É–Ω–µ—Ü', '–ü–æ—é—â–∞—è –°–µ–ª–µ–¥–∫–∞',
    '–†–∞–¥—É–∂–Ω—ã–π –ü—É–∑—ã—Ä–µ–∫', '–•–∏—Ö–∏–∫–∞—é—â–∞—è –©—É–∫–∞', '–ü—Ä—ã–≥—É—á–∏–π –ö–∞—Ä–ø', '–£–ª—ã–±—á–∏–≤–∞—è –¢—Ä–µ—Å–∫–∞',
    '–í–µ—Å–µ–ª–∞—è –ö–∞–º–±–∞–ª–∞', '–ò–≥—Ä–∏–≤—ã–π –õ–æ—Å–æ—Å—å', '–°—á–∞—Å—Ç–ª–∏–≤–∞—è –°–∫—É–º–±—Ä–∏—è', '–û–∑–æ—Ä–Ω–æ–π –ú–∏–Ω—Ç–∞–π'
  ];

  const fishRarities = ['ü•â –û–±—ã—á–Ω–∞—è', 'ü•à –†–µ–¥–∫–∞—è', 'ü•á –≠–ø–∏—á–µ—Å–∫–∞—è', 'üíé –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'];

  const startFishing = () => {
    setGameState('fishing');
    setFishingProgress(0);
    
    const interval = setInterval(() => {
      setFishingProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          const newFish = {
            name: funnyFishNames[Math.floor(Math.random() * funnyFishNames.length)],
            rarity: fishRarities[Math.floor(Math.random() * fishRarities.length)],
            value: Math.floor(Math.random() * 100) + 10,
            emoji: ['üê†', 'üê°', 'ü¶à', 'üêü', 'ü¶ë'][Math.floor(Math.random() * 5)]
          };
          setCaughtFish(prev => [...prev, newFish]);
          setCoins(prev => prev + newFish.value);
          setGameState('caught');
          setTimeout(() => setGameState('waiting'), 3000);
          return 100;
        }
        return prev + 2;
      });
    }, 50);
  };

  const sendMessage = () => {
    if (newMessage.trim()) {
      setChatMessages(prev => [...prev, {
        user: 'üòä –¢—ã',
        message: newMessage,
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
      }]);
      setNewMessage('');
    }
  };

  const sections = [
    { id: 'hero', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'Home' },
    { id: 'game', label: '–ò–≥—Ä–∞—Ç—å', icon: 'Fish' },
    { id: 'characters', label: '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏', icon: 'Users' },
    { id: 'tournaments', label: '–¢—É—Ä–Ω–∏—Ä—ã', icon: 'Trophy' },
    { id: 'shop', label: '–ú–∞–≥–∞–∑–∏–Ω', icon: 'ShoppingCart' },
    { id: 'community', label: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ', icon: 'MessageCircle' },
    { id: 'news', label: '–ù–æ–≤–æ—Å—Ç–∏', icon: 'Newspaper' },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-200 via-blue-100 to-white">
      {/* Navigation */}
      <nav className="bg-ocean/90 backdrop-blur-sm shadow-lg sticky top-0 z-50">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="text-2xl">üé£</div>
              <h1 className="text-2xl font-bold text-white">Smiley Fisher Online</h1>
            </div>
            <div className="hidden md:flex space-x-6">
              {sections.map(section => (
                <button
                  key={section.id}
                  onClick={() => setCurrentSection(section.id)}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
                    currentSection === section.id 
                      ? 'bg-white text-ocean' 
                      : 'text-white hover:bg-white/20'
                  }`}
                >
                  <Icon name={section.icon} size={18} />
                  <span>{section.label}</span>
                </button>
              ))}
            </div>
            <div className="flex items-center space-x-3">
              <Badge variant="secondary" className="bg-sunshine text-black">
                üí∞ {coins}
              </Badge>
              <Button variant="outline" className="text-ocean border-white bg-white hover:bg-white/90">
                –í–æ–π—Ç–∏
              </Button>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      {currentSection === 'hero' && (
        <section className="py-20 text-center">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <img 
                src="/img/80d3a0d4-77a3-4958-a642-ed84b7dfcedb.jpg" 
                alt="Smiley Fisher Hero"
                className="mx-auto mb-8 w-64 h-64 object-cover rounded-full shadow-2xl animate-bounce"
              />
              <h2 className="text-5xl font-bold mb-6 text-ocean">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Smiley Fisher Online! üòäüé£
              </h2>
              <p className="text-xl mb-8 text-gray-700 max-w-2xl mx-auto">
                –°–∞–º–∞—è –≤–µ—Å–µ–ª–∞—è –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞ –ø—Ä–æ —Ä—ã–±–∞–ª–∫—É! –ò–≥—Ä–∞–π –∑–∞ —Å–º–∞–π–ª–∏–∫–∞, –ª–æ–≤–∏ —Ä–µ–¥–∫—É—é —Ä—ã–±—É, 
                —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ—é —Ä—ã–±–æ–ª–æ–≤–Ω—É—é –∏–º–ø–µ—Ä–∏—é!
              </p>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <Card className="transform hover:scale-105 transition-transform">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-center">
                      üéÆ <span className="ml-2">–ò–≥—Ä–∞–π –æ–Ω–ª–∞–π–Ω</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                  </CardContent>
                </Card>
                <Card className="transform hover:scale-105 transition-transform">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-center">
                      üê† <span className="ml-2">–°–æ–±–∏—Ä–∞–π —Ä—ã–±</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>–ë–æ–ª–µ–µ 100 –≤–∏–¥–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—ã–± —Å –∑–∞–±–∞–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏</p>
                  </CardContent>
                </Card>
                <Card className="transform hover:scale-105 transition-transform">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-center">
                      ‚ö° <span className="ml-2">–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>–ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –∏ —É–ª—É—á—à–∞–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ —Å–Ω–∞—Å—Ç–∏</p>
                  </CardContent>
                </Card>
              </div>
              <Button 
                size="lg" 
                className="bg-coral hover:bg-coral/90 text-white text-xl px-8 py-4"
                onClick={() => setCurrentSection('game')}
              >
                üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É!
              </Button>
            </div>
          </div>
        </section>
      )}

      {/* Game Section */}
      {currentSection === 'game' && (
        <section className="py-12">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              
              {/* Fishing Game */}
              <div className="lg:col-span-2">
                <Card className="h-96 relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-b from-blue-300 to-blue-600">
                    <div className="absolute bottom-0 w-full h-24 bg-gradient-to-t from-blue-800 to-transparent"></div>
                  </div>
                  <CardContent className="relative z-10 p-8 h-full flex flex-col justify-center items-center text-white">
                    {gameState === 'waiting' && (
                      <div className="text-center">
                        <div className="text-6xl mb-4 animate-bounce">üé£</div>
                        <h3 className="text-2xl font-bold mb-4">–ì–æ—Ç–æ–≤ –∫ —Ä—ã–±–∞–ª–∫–µ?</h3>
                        <Button 
                          size="lg"
                          className="bg-sunshine hover:bg-sunshine/90 text-black"
                          onClick={startFishing}
                        >
                          –ó–∞–±—Ä–æ—Å–∏—Ç—å —É–¥–æ—á–∫—É!
                        </Button>
                      </div>
                    )}
                    
                    {gameState === 'fishing' && (
                      <div className="text-center w-full max-w-md">
                        <div className="text-4xl mb-4 animate-pulse">üé£</div>
                        <h3 className="text-xl font-bold mb-4">–õ–æ–≤–∏–º —Ä—ã–±—É...</h3>
                        <Progress value={fishingProgress} className="mb-4" />
                        <p className="text-sm opacity-90">–ñ–¥–∏ –ø–æ–∫–ª–µ–≤–∫—É!</p>
                      </div>
                    )}
                    
                    {gameState === 'caught' && caughtFish.length > 0 && (
                      <div className="text-center">
                        <div className="text-6xl mb-4 animate-bounce">{caughtFish[caughtFish.length - 1].emoji}</div>
                        <h3 className="text-2xl font-bold mb-2">–ü–æ–π–º–∞–Ω–∞ —Ä—ã–±–∞!</h3>
                        <p className="text-xl mb-2">{caughtFish[caughtFish.length - 1].name}</p>
                        <Badge variant="secondary" className="mb-2">
                          {caughtFish[caughtFish.length - 1].rarity}
                        </Badge>
                        <p className="text-lg">+{caughtFish[caughtFish.length - 1].value} –º–æ–Ω–µ—Ç</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
                
                {/* Caught Fish Collection */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Icon name="Package" className="mr-2" />
                      –¢–≤–æ–π —É–ª–æ–≤ ({caughtFish.length})
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ScrollArea className="h-32">
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                        {caughtFish.map((fish, index) => (
                          <div key={index} className="text-center p-2 bg-blue-50 rounded-lg">
                            <div className="text-2xl mb-1">{fish.emoji}</div>
                            <p className="text-xs font-semibold">{fish.name}</p>
                            <p className="text-xs text-gray-600">{fish.value}üí∞</p>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </CardContent>
                </Card>
              </div>

              {/* Chat */}
              <div>
                <Card className="h-96">
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Icon name="MessageCircle" className="mr-2" />
                      –ß–∞—Ç —Ä—ã–±–∞–∫–æ–≤ üí¨
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="flex flex-col h-80">
                    <ScrollArea className="flex-1 mb-4">
                      <div className="space-y-3">
                        {chatMessages.map((msg, index) => (
                          <div key={index} className="bg-blue-50 p-3 rounded-lg">
                            <div className="flex justify-between items-start mb-1">
                              <span className="font-semibold text-sm">{msg.user}</span>
                              <span className="text-xs text-gray-500">{msg.time}</span>
                            </div>
                            <p className="text-sm">{msg.message}</p>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                    <div className="flex space-x-2">
                      <Input
                        placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                        className="flex-1"
                      />
                      <Button onClick={sendMessage} size="sm">
                        <Icon name="Send" size={16} />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Characters Section */}
      {currentSection === 'characters' && (
        <section className="py-12">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold text-center mb-8 text-ocean">–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {['üòä', 'üòé', 'ü§†', 'üëë', 'üéì', 'üé≠'].map((emoji, index) => (
                <Card key={index} className="text-center hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="text-6xl mb-4">{emoji}</div>
                    <h3 className="text-xl font-bold mb-2">–°–º–∞–π–ª–∏–∫ {index + 1}</h3>
                    <p className="text-gray-600 mb-4">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –æ—Å–æ–±—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏</p>
                    <Button variant="outline">–í—ã–±—Ä–∞—Ç—å</Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Other sections would go here */}
      {currentSection === 'tournaments' && (
        <section className="py-12">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-3xl font-bold mb-8 text-ocean">üèÜ –¢—É—Ä–Ω–∏—Ä—ã</h2>
            <p className="text-xl text-gray-700">–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –ª—É—á—à–∏–º–∏ —Ä—ã–±–∞–∫–∞–º–∏ –º–∏—Ä–∞!</p>
          </div>
        </section>
      )}

      {currentSection === 'shop' && (
        <section className="py-12">
          <div className="container mx-auto px-4 text-center">
            <h2 className="text-3xl font-bold mb-8 text-ocean">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h2>
            <p className="text-xl text-gray-700">–£–ª—É—á—à–∞–π —Å–Ω–∞—Å—Ç–∏ –∏ –ø–æ–∫—É–ø–∞–π –Ω–æ–≤—ã–µ –æ—Å—Ç—Ä–æ–≤–∞!</p>
          </div>
        </section>
      )}

      {/* Footer */}
      <footer className="bg-ocean text-white py-8 mt-20">
        <div className="container mx-auto px-4 text-center">
          <div className="text-2xl mb-4">üé£üòä</div>
          <p className="mb-4">Smiley Fisher Online - –°–∞–º–∞—è –≤–µ—Å–µ–ª–∞—è –∏–≥—Ä–∞ –ø—Ä–æ —Ä—ã–±–∞–ª–∫—É!</p>
          <div className="flex justify-center space-x-6">
            <a href="#" className="hover:text-sunshine transition-colors">–û –∏–≥—Ä–µ</a>
            <a href="#" className="hover:text-sunshine transition-colors">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
            <a href="#" className="hover:text-sunshine transition-colors">–°–æ–æ–±—â–µ—Å—Ç–≤–æ</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default SmileyFisherOnline;